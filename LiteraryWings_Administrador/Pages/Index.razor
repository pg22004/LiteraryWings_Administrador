@layout LoginLayout
@page "/"

@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService
@inject HttpClient Http

<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />


<div class="page">
    <div class="container2">
        <div class="left">
            <div class="login">Login</div>
            <div class="eula">
                Ingrese sus credenciales para iniciar sesión.
            </div>
        </div>
        <div class="right">
            <div class="">

                <EditForm Model="@user" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />

                    <MudGrid Class="right2">
                        <MudItem xs="10">
                            <MudTextField Label="Usuario" Class="mt-3 TextUsuario" @bind-Value="user.Login" For="@(() => user.Login)" />
                        </MudItem>
                        <MudItem xs="10">
                            <MudTextField Label="Clave" Class="mt-3 TextClave" @bind-Value="user.Password" For="@(() => user.Password)" InputType="InputType.Password" />
                        </MudItem>

                        <button Type="Submit" Variant="Variant.Filled" Class="BotonLogin" >
                                Login
                        </button>
                       
                    </MudGrid>

                </EditForm>
            </div>
        </div>
    </div>
    <div class="ConteinerError">
        <div class="left2">

        </div>
        <div class="right3">
            <div class="AlertError">
                @if (showLeaveAlert)
                {
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">No se reconocen las credenciales ingresadas.</MudAlert>

                }
            </div>
        </div>
         
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private bool showLeaveAlert = false;

    UserLogin user = new UserLogin();
    bool success;


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity != null)
        {
            if (user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo($"/home");
            }
        }
    }

    protected async Task OnValidSubmit()
    {
        var httpResponse = await Http.PostAsJsonAsync<UserLogin>("usuario/login", user);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            var contentResponse = await httpResponse.Content.ReadAsStringAsync();
            var token = contentResponse;
            if (token != null)
            {
                await _localStorageService.SetItemAsync("token", token);
                NavigationManager.NavigateTo($"home", forceLoad: true);
            }
            else
            {
                showLeaveAlert = true;
            }
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }
}

