@page "/usuario/editar/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<h1 class="Titulo-EditarLibro">Modificar Usuario</h1>

<div class="Contenedor-Agregar-Editar-Eliminar">

    <EditForm Model="usuario" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Nombre" @bind-Value="usuario.Nombre" For="@(() => usuario.Nombre)" />
                <MudTextField Label="Apellido" @bind-Value="usuario.Apellido" For="@(() => usuario.Apellido)" />
                <MudTextField Label="Login" @bind-Value="usuario.Login" For="@(() => usuario.Login)" />
                <MudSelect Variant="Variant.Outlined" Label="Estado" AnchorOrigin="Origin.BottomCenter"
                           @bind-Value="usuario.Estatus" For="@(() => usuario.Estatus)">
                    <MudSelectItem Value="1">Activo</MudSelectItem>
                    <MudSelectItem Value="2">Inactivo</MudSelectItem>

                </MudSelect>
                <MudSelect Variant="Variant.Outlined" Label="Rol" AnchorOrigin="Origin.BottomCenter"
                           @bind-Value="usuario.IdRol" For="@(() => usuario.IdRol)">
                    @foreach (var item in roles)
                    {
                        <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                    }
                </MudSelect>
            </MudCardContent>
            <MudCardActions>
                <div class="ContenedorBotonesGuardarLibro">
                    <a href="@($"/usuario/index")">
                        <button class="BotonesAdminlibroAtras Atras">Cancelar</button>
                    </a>
                    <button Type="Submit" Variant="Variant.Filled" Class="BotonesAdminlibroGuardar Modificar">Guardar cambios</button>
                </div>
            </MudCardActions>
        </MudCard>
    </EditForm>
    @if (showLeaveAlert)
    {
        <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">No se pudo guardar.</MudAlert>
    }

</div>

@code {
    [Parameter]
    public int id { get; set; }

    private IEnumerable<Rol>? roles = new List<Rol>();
    private bool showLeaveAlert = false;
    UsuarioEdit usuario = new UsuarioEdit();

    protected override async Task OnInitializedAsync()
    {
        Http.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));

        var resp = await Http.GetStringAsync("usuario/" + id);
        usuario = JsonSerializer.Deserialize<UsuarioEdit>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        await getRoles();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await saveChanges();
    }

    private async Task saveChanges()
    {
        var httpResponse = await Http.PutAsJsonAsync<UsuarioEdit>("usuario/" + usuario.Id, usuario);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            NavigationManager.NavigateTo("usuario/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }

    private async Task getRoles()
    {
        var httpResponse = await Http.GetStringAsync("rol");
        roles = JsonSerializer.Deserialize<IEnumerable<Rol>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}
