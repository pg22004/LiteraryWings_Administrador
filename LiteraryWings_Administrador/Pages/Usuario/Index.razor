@page "/usuario/index"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<h1 class="Titulo-Libro">Usuarios</h1>
<br />
<div class="ContenedorBotonAgregarIli">
    <a href="/usuario/agregar">
        <button class="button">
            Agregar
        </button>
    </a>
</div>
<br />

<MudTable Items="@usuarios" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudSpacer />      
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Apellido</MudTh>
        <MudTh>Login</MudTh>
        <MudTh>Estado</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
        <MudTd DataLabel="Apellido">@context.Apellido</MudTd>
        <MudTd DataLabel="Login">@context.Login</MudTd>
        @if (context.Estatus == 1)
        {
            <MudTd DataLabel="Estatus">Activo</MudTd>
        }
        else
        {
            <MudTd DataLabel="Estatus">Inactivo</MudTd>
        }

        <MudTd>
            <MudButton Link="@($"/usuario/editar/{context.Id}")" Size="Size.Small" Variant="Variant.Filled" Color="Color.Tertiary"
                       StartIcon="@Icons.Material.Filled.EditNote"
                       Class="text-center">Editar</MudButton>
            <MudButton Link="@($"/usuario/eliminar/{context.Id}")" Size="Size.Small" Variant="Variant.Filled" Color="Color.Error"
                       StartIcon="@Icons.Material.Filled.Delete"
                       Class="text-center">Eliminar</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Usuario> usuarios = new List<Usuario>();
    private string searchText = "";
    private Usuario usuario = new Usuario();

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getAll();
    }

    private async Task getAll()
    {
        var httpResponse = await httpClient.PostAsJsonAsync("usuario/buscar", usuario);
        string respString = await httpResponse.Content.ReadAsStringAsync();
        usuarios = JsonSerializer.Deserialize<IEnumerable<Usuario>>(respString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private void goAdd()
    {
        NavigationManager.NavigateTo("usuario/agregar");
    }
}