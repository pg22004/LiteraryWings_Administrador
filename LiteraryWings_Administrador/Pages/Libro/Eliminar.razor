@page "/libro/eliminar/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<h1 class="Titulo-EliminarLibro">Eliminar Libro</h1>

<div class="Contenedor-Agregar-Editar-Eliminar">

    <EditForm Model="libro" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Nombre" @bind-Value="libro.Nombre" For="@(() => libro.Nombre)" Disabled />
                <MudSelect Variant="Variant.Outlined" Label="Autor" AnchorOrigin="Origin.BottomCenter"
                           @bind-Value="libro.IdAutor" For="@(() => libro.IdAutor)" Disabled>
                    @foreach (var item in autores)
                    {
                        <MudSelectItem Value="@item.Id">@item.Seudonimo</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect Variant="Variant.Outlined" Label="Categoria" AnchorOrigin="Origin.BottomCenter"
                           @bind-Value="libro.IdCategoria" For="@(() => libro.IdCategoria)" Disabled>
                    @foreach (var item in categorias)
                    {
                        <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect Variant="Variant.Outlined" Label="Editorial" AnchorOrigin="Origin.BottomCenter"
                           @bind-Value="libro.IdEditorial" For="@(() => libro.IdEditorial)" Disabled>
                    @foreach (var item in editoriales)
                    {
                        <MudSelectItem Value="@item.Id">@item.Nombre</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Label="FechaLanzamiento" @bind-Value="libro.FechaLanzamiento" For="@(() => libro.FechaLanzamiento)" Disabled />
                <MudTextField Label="Idioma" @bind-Value="libro.Idioma" For="@(() => libro.Idioma)" Disabled />
                <MudTextField Label="Paginas" @bind-Value="libro.Paginas" For="@(() => libro.Paginas)" Disabled />
                <MudTextField Label="Descripcion" @bind-Value="libro.Descripcion" For="@(() => libro.Descripcion)" Disabled />
                <MudTextField Label="Descripcion2" @bind-Value="libro.Descripcion2" For="@(() => libro.Descripcion2)" Disabled />
                <MudTextField Label="ImagenPortada" @bind-Value="libro.ImagenPortada" For="@(() => libro.ImagenPortada)" Disabled />
                <MudTextField Label="LinkDescarga" @bind-Value="libro.LinkDescarga" For="@(() => libro.LinkDescarga)" Disabled />
                <MudTextField Label="ImagenIntroduccion" @bind-Value="libro.ImagenIntroduccion" For="@(() => libro.ImagenIntroduccion)" Disabled />
            </MudCardContent>
            <MudCardActions>
                <div class="ContenedorBotonesGuardarLibro">
                    <a href="@($"/libro/index")">
                        <button class="BotonesAdminlibroAtras Cancelar">Cancelar</button>
                    </a>
                    <button Type="Submit" Variant="Variant.Filled" Class="BotonesAdminlibroGuardar Eliminar">Eliminar</button>
                </div>
            </MudCardActions>
        </MudCard>
    </EditForm>
    @if (showLeaveAlert)
    {
        <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">Ocurrió un problema.</MudAlert>
    }

</div>

@code {
    [Parameter]
    public int id { get; set; }

    private IEnumerable<Autor> autores = new List<Autor>();
    private IEnumerable<Categoria> categorias = new List<Categoria>();
    private IEnumerable<Editorial> editoriales = new List<Editorial>();
    private bool showLeaveAlert = false;
    Libro libro = new Libro();

    protected override async Task OnInitializedAsync()
    {
        Http.DefaultRequestHeaders.Authorization =
        new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getAutores();
        await getCategorias();
        await getEditoriales();

        var resp = await Http.GetStringAsync("libro/" + id);
        libro = JsonSerializer.Deserialize<Libro>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await eliminar();
    }

    private async Task eliminar()
    {
        var httpResponse = await Http.DeleteAsync("libro/" + libro.Id);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            NavigationManager.NavigateTo("libro/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }

    private async Task getAutores()
    {
        var httpResponse = await Http.GetStringAsync("autor");
        autores = JsonSerializer.Deserialize<IEnumerable<Autor>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
    private async Task getCategorias()
    {
        var httpResponse = await Http.GetStringAsync("categoria");
        categorias = JsonSerializer.Deserialize<IEnumerable<Categoria>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
    private async Task getEditoriales()
    {
        var httpResponse = await Http.GetStringAsync("editorial");
        editoriales = JsonSerializer.Deserialize<IEnumerable<Editorial>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}