@page "/autor/editar/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Editar Autor</MudText>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <EditForm Model="autor" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Nombre" @bind-Value="autor.Nombre" For="@(() => autor.Nombre)" />
                    </MudCardContent>
                    <MudCardContent>
                        <MudTextField Label="Apellido" @bind-Value="autor.Apellido" For="@(() => autor.Apellido)" />
                    </MudCardContent>
                    <MudCardContent>
                        <MudTextField Label="Fecha de nacimiento" @bind-Value="autor.FechaNacimiento" For="@(() => autor.FechaNacimiento)" />
                    </MudCardContent>
                    <MudCardContent>
                        <MudTextField Label="Imagen del autor" @bind-Value="autor.AutorImagen" For="@(() => autor.AutorImagen)" />
                    </MudCardContent>
                    <MudCardContent>
                        <MudTextField Label="Nombre Artistico" @bind-Value="autor.Seudonimo" For="@(() => autor.Seudonimo)" />
                    </MudCardContent>
                    <MudCardContent>
                        <MudTextField Label="Nacionalidad" @bind-Value="autor.Nacionalidad" For="@(() => autor.Nacionalidad)" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Guardar cambios</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">No se pudo guardar.</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int id { get; set; }
    private bool showLeaveAlert = false;
    Autor autor = new Autor();

    protected override async Task OnInitializedAsync()
    {
        Http.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        var resp = await Http.GetStringAsync("autor/" + id);
        autor = JsonSerializer.Deserialize<Autor>(resp, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await saveChanges();
    }

    private async Task saveChanges()
    {

        var httpResponse = await Http.PutAsJsonAsync<Autor>("autor/" + autor.Id, autor);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            NavigationManager.NavigateTo("autor/index");
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }
}
